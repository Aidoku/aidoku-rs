#![no_std]
use aidoku::{
	alloc::{String, Vec},
	AidokuError, Chapter, DeepLinkHandler, DeepLinkResult, FilterValue, Home, HomeLayout, Listing,
	Manga, MangaPageResult, Page, Result, Source,
};

pub struct Params {}

impl Default for Params {
	fn default() -> Self {
		Self {}
	}
}

pub struct {{TEMPLATE_NAME}}<T: Impl> {
	inner: T,
	params: Params,
}

pub trait Impl {
	fn new() -> Self;

	fn params(&self) -> Params;

	fn get_manga_list(
		&self,
		_params: &Params,
		_listing: Listing,
		_page: i32,
	) -> Result<MangaPageResult> {
		Err(AidokuError::Unimplemented)
	}

	fn get_search_manga_list(
		&self,
		_params: &Params,
		_query: Option<String>,
		_page: i32,
		_filters: Vec<FilterValue>,
	) -> Result<MangaPageResult> {
		Err(AidokuError::Unimplemented)
	}

	fn get_manga_update(
		&self,
		_params: &Params,
		_manga: Manga,
		_needs_details: bool,
		_needs_chapters: bool,
	) -> Result<Manga> {
		Err(AidokuError::Unimplemented)
	}

	fn get_page_list(
		&self,
		_params: &Params,
		_manga: Manga,
		_chapter: Chapter,
	) -> Result<Vec<Page>> {
		Err(AidokuError::Unimplemented)
	}

	fn get_home(&self, _params: &Params) -> Result<HomeLayout> {
		Err(AidokuError::Unimplemented)
	}

	fn handle_deep_link(&self, _params: &Params, _url: String) -> Result<Option<DeepLinkResult>> {
		Err(AidokuError::Unimplemented)
	}
}

impl<T: Impl> Source for {{TEMPLATE_NAME}}<T> {
	fn new() -> Self {
		let inner = T::new();
		let params = inner.params();
		Self { inner, params }
	}

	fn get_manga_list(&self, listing: Listing, page: i32) -> Result<MangaPageResult> {
		self.inner.get_manga_list(&self.params, listing, page)
	}

	fn get_search_manga_list(
		&self,
		query: Option<String>,
		page: i32,
		filters: Vec<FilterValue>,
	) -> Result<MangaPageResult> {
		self.inner
			.get_search_manga_list(&self.params, query, page, filters)
	}

	fn get_manga_update(
		&self,
		manga: Manga,
		needs_details: bool,
		needs_chapters: bool,
	) -> Result<Manga> {
		self.inner
			.get_manga_update(&self.params, manga, needs_details, needs_chapters)
	}

	fn get_page_list(&self, manga: Manga, chapter: Chapter) -> Result<Vec<Page>> {
		self.inner.get_page_list(&self.params, manga, chapter)
	}
}

impl<T: Impl> Home for {{TEMPLATE_NAME}}<T> {
	fn get_home(&self) -> Result<HomeLayout> {
		self.inner.get_home(&self.params)
	}
}

impl<T: Impl> DeepLinkHandler for {{TEMPLATE_NAME}}<T> {
	fn handle_deep_link(&self, url: String) -> Result<Option<DeepLinkResult>> {
		self.inner.handle_deep_link(&self.params, url)
	}
}
