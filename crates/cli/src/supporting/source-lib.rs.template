#![no_std]
use aidoku::{
	alloc::{String, Vec},
	prelude::*,
	AidokuError, Chapter, DeepLinkHandler, DeepLinkResult, FilterValue, Home, HomeLayout, Listing,
	Manga, MangaPageResult, Page, Result, Source,
};

struct {{SOURCE_NAME}};

impl Source for {{SOURCE_NAME}} {
	fn new() -> Self {
		Self
	}

	fn get_manga_list(&self, _listing: Listing, _page: i32) -> Result<MangaPageResult> {
		Err(AidokuError::Unimplemented)
	}

	fn get_search_manga_list(
		&self,
		_query: Option<String>,
		_page: i32,
		_filters: Vec<FilterValue>,
	) -> Result<MangaPageResult> {
		Err(AidokuError::Unimplemented)
	}

	fn get_manga_update(
		&self,
		_manga: Manga,
		_needs_details: bool,
		_needs_chapters: bool,
	) -> Result<Manga> {
		Err(AidokuError::Unimplemented)
	}

	fn get_page_list(&self, _manga: Manga, _chapter: Chapter) -> Result<Vec<Page>> {
		Err(AidokuError::Unimplemented)
	}
}

impl Home for {{SOURCE_NAME}} {
	fn get_home(&self) -> Result<HomeLayout> {
		Err(AidokuError::Unimplemented)
	}
}

impl DeepLinkHandler for {{SOURCE_NAME}} {
	fn handle_deep_link(&self, _url: String) -> Result<Option<DeepLinkResult>> {
		Err(AidokuError::Unimplemented)
	}
}

register_source!({{SOURCE_NAME}}, Home, DeepLinkHandler);
